enum Role {
  user
  admin
}

enum Gender {
  male
  female
  other
}

model Users {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique
  username     String    @unique
  password     String
  is_activated Boolean   @default(false)
  is_2fa       Boolean   @default(false)
  role         Role      @default(user)
  last_active  DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  profile     UserProfiles?
  pantries    UserPantries[]
  UserRatings UserRatings[]

  @@map("users")
}

model UserProfiles {
  user_id    String    @unique @db.Uuid
  first_name String
  last_name  String
  full_name  String
  avatar_url String
  gender     Gender?
  phone_num  String?
  address    String?
  birth_date DateTime?

  user Users @relation(fields: [user_id], references: [id])

  @@map("user_profiles")
}

model UserPantries {
  user_id       String @db.Uuid
  ingredient_id Int

  user       Users       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ingredient Ingredients @relation(fields: [ingredient_id], references: [id], onDelete: Cascade)

  @@id([user_id, ingredient_id])
  @@map("user_pantries")
}

model UserRatings {
  id         String    @id @default(uuid()) @db.Uuid
  user_id    String    @db.Uuid
  recipe_id  String
  rating     Int       @default(0)
  image_urls String[]
  comment    String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  user   Users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  recipe Recipes @relation(fields: [recipe_id], references: [id], onDelete: Cascade)

  @@map("user_ratings")
}
